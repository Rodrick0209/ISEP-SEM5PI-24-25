{
	"info": {
		"_postman_id": "89f9b826-f571-4dd9-b918-a52d6b065ec5",
		"name": "OperationRequest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39007062"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"pm.environment.set(\"jwtToken\", responseJson.token);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Token field exists in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Token is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"D202512345@gmail.com\",\n  \"password\": \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/Login/Login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Login",
						"Login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('deadLineDate');",
							"        pm.expect(item).to.have.property('priority');",
							"        pm.expect(item).to.have.property('patientId');",
							"        pm.expect(item).to.have.property('operationTypeId');",
							"        pm.expect(item).to.have.property('doctorThatWillPerformId');",
							"        pm.expect(item).to.have.property('doctorThatRequestedId');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"DeadLineDate is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.deadLineDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"const responseJson = pm.response.json();",
							"pm.environment.set(\"operationId\", responseJson[0].id);",
							"",
							"pm.environment.set(\"operationTypeId\", responseJson[0].operationTypeId);",
							"pm.environment.set(\"patientId\", responseJson[0].patientId);",
							"pm.environment.set(\"doctorThatWillPerformId\", responseJson[0].doctorThatWillPerformId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationRequest/GetAll",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationRequest",
						"GetAll"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.deadLineDate).to.exist;",
							"    pm.expect(responseData.priority).to.exist;",
							"    pm.expect(responseData.patientId).to.exist;",
							"    pm.expect(responseData.operationTypeId).to.exist;",
							"    pm.expect(responseData.doctorThatWillPerformId).to.exist;",
							"    pm.expect(responseData.doctorThatRequestedId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string');",
							"});",
							"",
							"pm.test(\"deadLineDate should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.deadLineDate).to.be.a('string');",
							"});",
							"",
							"pm.test(\"priority should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.priority).to.be.a('string');",
							"});",
							"",
							"pm.test(\"patientId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.patientId).to.be.a('string');",
							"});",
							"",
							"pm.test(\"operationTypeId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.operationTypeId).to.be.a('string');",
							"});",
							"",
							"pm.test(\"doctorThatWillPerformId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.doctorThatWillPerformId).to.be.a('string');",
							"});",
							"",
							"pm.test(\"doctorThatRequestedId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.doctorThatRequestedId).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationRequest/{{operationId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationRequest",
						"{{operationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for successful status code",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test that response contains an id",
							"pm.test(\"Response has an id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"id\");",
							"});",
							"",
							"// Test that response matches the request body structure",
							"pm.test(\"Response has correct structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"deadLineDate\", \"2026-02-18\");",
							"    pm.expect(jsonData).to.have.property(\"priority\", \"emergency\");",
							"    pm.expect(jsonData).to.have.property(\"doctorThatWillPerformId\", \"D202512345\");",
							"    pm.expect(jsonData).to.have.property(\"doctorThatRequestedId\", \"D202512345\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n    \"deadLineDate\": \"2026-02-18\",\n    \"priority\": \"emergency\",\n    \"patientId\": \"{{patientId}}\",\n    \"operationTypeId\": \"{{operationTypeId}}\",\n    \"doctorThatWillPerformId\": \"D202512345\",\n    \"doctorThatRequestedId\": \"D202512345\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationRequest",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationRequest"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('deadLineDate');",
							"    pm.expect(responseData).to.have.property('priority');",
							"    pm.expect(responseData).to.have.property('patientId');",
							"    pm.expect(responseData).to.have.property('operationTypeId');",
							"    pm.expect(responseData).to.have.property('doctorThatWillPerformId');",
							"    pm.expect(responseData).to.have.property('doctorThatRequestedId');",
							"});",
							"",
							"",
							"pm.test(\"DeadLineDate is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.deadLineDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{operationId}}\",\n    \"deadLineDate\": \"2024-12-25\",\n    \"priority\": \"emergency\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationRequest/{{operationId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationRequest",
						"{{operationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.deadLineDate).to.exist;",
							"    pm.expect(responseData.priority).to.exist;",
							"    pm.expect(responseData.patientId).to.exist;",
							"    pm.expect(responseData.operationTypeId).to.exist;",
							"    pm.expect(responseData.doctorThatWillPerformId).to.exist;",
							"    pm.expect(responseData.doctorThatRequestedId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Id should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.id).to.be.a('string');",
							"});",
							"",
							"pm.test(\"deadLineDate should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.deadLineDate).to.be.a('string');",
							"});",
							"",
							"pm.test(\"priority should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.priority).to.be.a('string');",
							"});",
							"",
							"pm.test(\"patientId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.patientId).to.be.a('string');",
							"});",
							"",
							"pm.test(\"operationTypeId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.operationTypeId).to.be.a('string');",
							"});",
							"",
							"pm.test(\"doctorThatWillPerformId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.doctorThatWillPerformId).to.be.a('string');",
							"});",
							"",
							"pm.test(\"doctorThatRequestedId should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.doctorThatRequestedId).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"protocolVersion": "http2"
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwtToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationRequest/{{operationId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationRequest",
						"{{operationId}}"
					]
				}
			},
			"response": []
		}
	]
}