{
	"info": {
		"_postman_id": "c9cf0c17-268a-4b99-b5c9-c2e3459a696a",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39007062"
	},
	"item": [
		{
			"name": "GetAllWorks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 400ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(400);",
							"});",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Presence of Content-Type header\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationType/GetAll",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"GetAll"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateWorks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response schema validation for id, name, status, preparationPhase, surgeryPhase, cleaningPhase, and specialization\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.preparationPhase).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.surgeryPhase).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.cleaningPhase).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.specialization).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Duration in preparationPhase, surgeryPhase, and cleaningPhase is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.preparationPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.surgeryPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.cleaningPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Verify requiredStaff in preparationPhase, surgeryPhase, and cleaningPhase have non-empty num and specialization\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.preparationPhase.requiredStaff).to.be.an('array');",
							"    pm.expect(responseData.surgeryPhase.requiredStaff).to.be.an('array');",
							"    pm.expect(responseData.cleaningPhase.requiredStaff).to.be.an('array');",
							"",
							"    responseData.preparationPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.not.be.empty;",
							"        pm.expect(staff.specialization).to.exist.and.to.not.be.empty;",
							"    });",
							"",
							"    responseData.surgeryPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.not.be.empty;",
							"        pm.expect(staff.specialization).to.exist.and.to.not.be.empty;",
							"    });",
							"",
							"    responseData.cleaningPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.not.be.empty;",
							"        pm.expect(staff.specialization).to.exist.and.to.not.be.empty;",
							"    });",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('preparationPhase');",
							"    pm.expect(responseData).to.have.property('surgeryPhase');",
							"    pm.expect(responseData).to.have.property('cleaningPhase');",
							"    pm.expect(responseData).to.have.property('specialization');",
							"});",
							"",
							"",
							"const response = pm.response.json();",
							"pm.environment.set(\"operationTypeId\", response.id);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "inherit"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"494a3c45-922d-4505-8f15-df18169c4eee\",\n    \"name\": \"teste\",\n    \"status\": \"active\",\n    \"preparationPhase\": {\n        \"id\": \"0b905f59-7b32-426e-ab24-20360e35abfc\",\n        \"duration\": 20,\n        \"requiredStaff\": [\n            {\n                \"num\": \"10\",\n                \"specialization\": \"961ae9ff-a3a1-4283-96c3-d5dd19dcda63\"\n            },\n            {\n                \"num\": \"20\",\n                \"specialization\": \"97c80fa2-af30-4a2a-af78-1f3c446fe8b9\"\n            }\n        ]\n    },\n    \"surgeryPhase\": {\n        \"id\": \"318ea6fb-9c6d-41d5-a6fe-e50c5b2a02cf\",\n        \"duration\": 90,\n        \"requiredStaff\": [\n            {\n                \"num\": \"2\",\n                \"specialization\": \"97c80fa2-af30-4a2a-af78-1f3c446fe8b9\"\n            }\n        ]\n    },\n    \"cleaningPhase\": {\n        \"id\": \"1a629912-e8b3-4a08-98dc-4d05e7b8139c\",\n        \"duration\": 15,\n        \"requiredStaff\": [\n            {\n                \"num\": \"2\",\n                \"specialization\": \"97c80fa2-af30-4a2a-af78-1f3c446fe8b9\"\n            }\n        ]\n    },\n    \"specialization\": \"961ae9ff-a3a1-4283-96c3-d5dd19dcda63\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationType/Create",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"Create"
					]
				},
				"description": "This API endpoint allows you to create a new operation type. The request should be sent to [https://localhost:5001/api/OperationType/Create](https://localhost:5001/api/OperationType/Create) using the HTTP POST method. The request body should contain the details of the operation type including its ID, name, status, preparation phase details, surgery phase details, cleaning phase details, and specialization.\n\nAfter making a successful request, the response will include the ID of the created object, which you can save for future reference."
			},
			"response": []
		},
		{
			"name": "CreateFailsForWrongId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/problem+json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the presence and format of errors, type, title, status, and traceId in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.errors).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.type).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.traceId).to.exist.and.to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "inherit"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"494a3c45-922d-4505-8f15-df18169c4ee\",\n    \"name\": \"teste\",\n    \"status\": \"active\",\n    \"preparationPhase\": {\n        \"id\": \"0b905f59-7b32-426e-ab24-20360e35abfc\",\n        \"duration\": 20,\n        \"requiredStaff\": [\n            {\n                \"num\": \"10\",\n                \"specialization\": \"961ae9ff-a3a1-4283-96c3-d5dd19dcda63\"\n            },\n            {\n                \"num\": \"20\",\n                \"specialization\": \"97c80fa2-af30-4a2a-af78-1f3c446fe8b9\"\n            }\n        ]\n    },\n    \"surgeryPhase\": {\n        \"id\": \"318ea6fb-9c6d-41d5-a6fe-e50c5b2a02cf\",\n        \"duration\": 90,\n        \"requiredStaff\": [\n            {\n                \"num\": \"2\",\n                \"specialization\": \"97c80fa2-af30-4a2a-af78-1f3c446fe8b9\"\n            }\n        ]\n    },\n    \"cleaningPhase\": {\n        \"id\": \"1a629912-e8b3-4a08-98dc-4d05e7b8139c\",\n        \"duration\": 15,\n        \"requiredStaff\": [\n            {\n                \"num\": \"2\",\n                \"specialization\": \"97c80fa2-af30-4a2a-af78-1f3c446fe8b9\"\n            }\n        ]\n    },\n    \"specialization\": \"961ae9ff-a3a1-4283-96c3-d5dd19dcda63\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationType/Create",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"Create"
					]
				},
				"description": "This API endpoint allows you to create a new operation type. The request should be sent to [https://localhost:5001/api/OperationType/Create](https://localhost:5001/api/OperationType/Create) using the HTTP POST method. The request body should contain the details of the operation type including its ID, name, status, preparation phase details, surgery phase details, cleaning phase details, and specialization.\n\nAfter making a successful request, the response will include the ID of the created object, which you can save for future reference."
			},
			"response": []
		},
		{
			"name": "GetIdWorks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"",
							"pm.test(\"Response schema is as expected\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData.id).to.be.a('string');",
							"",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData.name).to.be.a('string');",
							"",
							"});",
							"",
							"",
							"pm.test(\"Id, name fields are present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"});",
							"",
							"",
							"pm.test(\"Id is in valid UUID format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.match(/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/);",
							"});",
							"",
							"pm.test(\"Response contains the extracted ID\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('preparationPhase');",
							"    pm.expect(responseData).to.have.property('surgeryPhase');",
							"    pm.expect(responseData).to.have.property('cleaningPhase');",
							"    pm.expect(responseData).to.have.property('specialization');",
							"});",
							"",
							"",
							"pm.test(\"Id is in valid UUID format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.match(/[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/);",
							"});",
							"",
							"",
							"pm.test(\"Status is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Duration fields in preparationPhase, surgeryPhase, and cleaningPhase are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.preparationPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.surgeryPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.cleaningPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"RequiredStaff in preparationPhase contains num and specialization fields for each element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.preparationPhase.requiredStaff).to.be.an('array');",
							"    responseData.preparationPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.be.a('string');",
							"        pm.expect(staff.specialization).to.exist.and.to.be.a('string');",
							"    });",
							"    ",
							"    pm.expect(responseData.surgeryPhase.requiredStaff).to.be.an('array');",
							"    responseData.surgeryPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.be.a('string');",
							"        pm.expect(staff.specialization).to.exist.and.to.be.a('string');",
							"    });",
							"    ",
							"    pm.expect(responseData.cleaningPhase.requiredStaff).to.be.an('array');",
							"    responseData.cleaningPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.be.a('string');",
							"        pm.expect(staff.specialization).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"const response = pm.response.json();",
							"pm.environment.set(\"operationTypeId\", response.id);",
							"",
							"// Salvar preparationPhaseId no ambiente",
							"pm.environment.set(\"preparationPhaseId\", response.preparationPhase.id);",
							"",
							"// Salvar surgeryPhaseId no ambiente",
							"pm.environment.set(\"surgeryPhaseId\", response.surgeryPhase.id);",
							"",
							"// Salvar cleaningPhaseId no ambiente",
							"pm.environment.set(\"cleaningPhaseId\", response.cleaningPhase.id);",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// Parse the response body as JSON\nvar responseBody = pm.response.json();\n\n// Extract the ID from the response\nvar id = responseBody.id;\n\n// Set the extracted ID as an environment variable for future use\npm.environment.set(\"extractedID\", id);",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationType/{{operationTypeId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"{{operationTypeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetIdFails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - type, title, status, and traceId\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.type).to.exist;",
							"    pm.expect(responseData.title).to.exist;",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.traceId).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Type is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/8bec2864-97a1-4c85-97c2-e703bfdf66dd",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"8bec2864-97a1-4c85-97c2-e703bfdf66dd"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetIdFailsForNoId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify the response content type is 'text/plain'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response contains the error message 'System.FormatException: Unrecognized Guid format.'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"System.FormatException: Unrecognized Guid format.\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/id",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"id"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateWorks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"",
							"// Verificar se o status da resposta é 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verificar se a resposta tem todas as propriedades principais",
							"pm.test(\"Response has all main properties\", function () {",
							"    pm.expect(response).to.have.property(\"id\");",
							"    pm.expect(response).to.have.property(\"name\");",
							"    pm.expect(response).to.have.property(\"status\");",
							"    pm.expect(response).to.have.property(\"preparationPhase\");",
							"    pm.expect(response).to.have.property(\"surgeryPhase\");",
							"    pm.expect(response).to.have.property(\"cleaningPhase\");",
							"    pm.expect(response).to.have.property(\"specialization\");",
							"});",
							"",
							"// Verificar se o valor de id corresponde à variável de ambiente {{operationTypeId}}",
							"pm.test(\"operationTypeId is correct\", function () {",
							"    pm.expect(response.id).to.eql(pm.environment.get(\"operationTypeId\"));",
							"});",
							"",
							"// Verificar se a fase de preparação contém os campos corretos",
							"pm.test(\"preparationPhase has correct structure\", function () {",
							"    pm.expect(response.preparationPhase).to.have.property(\"id\");",
							"    pm.expect(response.preparationPhase).to.have.property(\"duration\");",
							"    pm.expect(response.preparationPhase).to.have.property(\"requiredStaff\");",
							"",
							"    pm.expect(response.preparationPhase.id).to.eql(pm.environment.get(\"preparationPhaseId\"));",
							"    pm.expect(response.preparationPhase.duration).to.eql(20);",
							"",
							"    pm.expect(response.preparationPhase.requiredStaff).to.be.an('array');",
							"    pm.expect(response.preparationPhase.requiredStaff[0].num).to.eql(\"10\");",
							"    pm.expect(response.preparationPhase.requiredStaff[1].num).to.eql(\"20\");",
							"});",
							"",
							"// Verificar se a fase de cirurgia contém os campos corretos",
							"pm.test(\"surgeryPhase has correct structure\", function () {",
							"    pm.expect(response.surgeryPhase).to.have.property(\"id\");",
							"    pm.expect(response.surgeryPhase).to.have.property(\"duration\");",
							"    pm.expect(response.surgeryPhase).to.have.property(\"requiredStaff\");",
							"",
							"    pm.expect(response.surgeryPhase.id).to.eql(pm.environment.get(\"surgeryPhaseId\"));",
							"    pm.expect(response.surgeryPhase.duration).to.eql(90);",
							"",
							"    pm.expect(response.surgeryPhase.requiredStaff).to.be.an('array');",
							"    pm.expect(response.surgeryPhase.requiredStaff[0].num).to.eql(\"20\");",
							"});",
							"",
							"// Verificar se a fase de limpeza contém os campos corretos",
							"pm.test(\"cleaningPhase has correct structure\", function () {",
							"    pm.expect(response.cleaningPhase).to.have.property(\"id\");",
							"    pm.expect(response.cleaningPhase).to.have.property(\"duration\");",
							"    pm.expect(response.cleaningPhase).to.have.property(\"requiredStaff\");",
							"",
							"    pm.expect(response.cleaningPhase.id).to.eql(pm.environment.get(\"cleaningPhaseId\"));",
							"    pm.expect(response.cleaningPhase.duration).to.eql(15);",
							"",
							"    pm.expect(response.cleaningPhase.requiredStaff).to.be.an('array');",
							"    pm.expect(response.cleaningPhase.requiredStaff[0].num).to.eql(\"2\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"{{operationTypeId}}\",\n    \"name\": \"New Operation Type\",\n    \"status\": \"inactive\",\n    \"preparationPhase\": {\n        \"id\": \"{{preparationPhaseId}}\",\n        \"duration\": 20,\n        \"requiredStaff\": [\n            {\n                \"num\": \"10\",\n                \"specialization\": \"1d81b8fa-28db-4741-968e-2d8250299d65\"\n            },\n            {\n                \"num\": \"20\",\n                \"specialization\": \"24313c34-8d11-493e-b10d-1226633b8cde\"\n            }\n        ]\n    },\n    \"surgeryPhase\": {\n        \"id\": \"{{surgeryPhaseId}}\",\n        \"duration\": 90,\n        \"requiredStaff\": [\n            {\n                \"num\": \"20\",\n                \"specialization\": \"24313c34-8d11-493e-b10d-1226633b8cde\"\n            }\n        ]\n    },\n    \"cleaningPhase\": {\n        \"id\": \"{{cleaningPhaseId}}\",\n        \"duration\": 15,\n        \"requiredStaff\": [\n            {\n                \"num\": \"2\",\n                \"specialization\": \"24313c34-8d11-493e-b10d-1226633b8cde\"\n            }\n        ]\n    },\n    \"specialization\": \"1d81b8fa-28db-4741-968e-2d8250299d65\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationType/{{operationTypeId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"{{operationTypeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateFailsForWrongId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('type');",
							"  pm.expect(responseData).to.have.property('title');",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData).to.have.property('traceId');",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/problem+json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"fc565785-7ee7-4d58-83e4-385ad222817f\",\n    \"name\": \"New Operation Type\",\n    \"status\": \"active\",\n    \"preparationPhase\": {\n        \"id\": \"040c7482-ae8c-4875-9e96-94a0903ea651\",\n        \"duration\": 20,\n        \"requiredStaff\": [\n            {\n                \"num\": \"10\",\n                \"specialization\": \"63a76fea-dd7a-4bf1-9383-883d7c238c87\"\n            },\n            {\n                \"num\": \"20\",\n                \"specialization\": \"57afa4b8-0e10-4509-a578-0545cda29dde\"\n            }\n        ]\n    },\n    \"surgeryPhase\": {\n        \"id\": \"987dd8c5-4fa3-476a-a33a-48d114071ebf\",\n        \"duration\": 90,\n        \"requiredStaff\": [\n            {\n                \"num\": \"20\",\n                \"specialization\": \"57afa4b8-0e10-4509-a578-0545cda29dde\"\n            }\n        ]\n    },\n    \"cleaningPhase\": {\n        \"id\": \"7fae925c-e713-4a5c-b767-74e44bbf8705\",\n        \"duration\": 15,\n        \"requiredStaff\": [\n            {\n                \"num\": \"2\",\n                \"specialization\": \"57afa4b8-0e10-4509-a578-0545cda29dde\"\n            }\n        ]\n    },\n    \"specialization\": \"63a76fea-dd7a-4bf1-9383-883d7c238c87\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/OperationType/fc565785-7ee7-4d58-83e4-385ad222817e",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"fc565785-7ee7-4d58-83e4-385ad222817e"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeactivateWorks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('preparationPhase');",
							"    pm.expect(responseData).to.have.property('surgeryPhase');",
							"    pm.expect(responseData).to.have.property('cleaningPhase');",
							"    pm.expect(responseData).to.have.property('specialization');",
							"});",
							"",
							"",
							"pm.test(\"Duration in preparationPhase, surgeryPhase, and cleaningPhase are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.preparationPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.surgeryPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.cleaningPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"RequiredStaff in preparationPhase, surgeryPhase, and cleaningPhase have non-empty num and specialization\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    // Check preparationPhase",
							"    pm.expect(responseData.preparationPhase.requiredStaff).to.be.an('array');",
							"    responseData.preparationPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"num should not be empty\");",
							"        pm.expect(staff.specialization).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"specialization should not be empty\");",
							"    });",
							"",
							"    // Check surgeryPhase",
							"    pm.expect(responseData.surgeryPhase.requiredStaff).to.be.an('array');",
							"    responseData.surgeryPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"num should not be empty\");",
							"        pm.expect(staff.specialization).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"specialization should not be empty\");",
							"    });",
							"",
							"    // Check cleaningPhase",
							"    pm.expect(responseData.cleaningPhase.requiredStaff).to.be.an('array');",
							"    responseData.cleaningPhase.requiredStaff.forEach(function(staff) {",
							"        pm.expect(staff.num).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"num should not be empty\");",
							"        pm.expect(staff.specialization).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"specialization should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Status is inactive\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.status).to.equal(\"inactive\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/{{operationTypeId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"{{operationTypeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeactivateFailsForNoId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Verify the response content type is 'text/plain'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response contains the error message 'System.FormatException: Unrecognized Guid format.'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"System.FormatException: Unrecognized Guid format.\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/id",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"id"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeactivateFailsForWrongId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 300ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(300);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('type');",
							"    pm.expect(responseData).to.have.property('title');",
							"    pm.expect(responseData).to.have.property('status');",
							"    pm.expect(responseData).to.have.property('traceId');",
							"});",
							"",
							"",
							"pm.test(\"Type is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/8bec2864-97a1-4c85-97c2-e703bfdf66dd",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"8bec2864-97a1-4c85-97c2-e703bfdf66dd"
					]
				}
			},
			"response": []
		},
		{
			"name": "FilterWorksForSpecialization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType).to.have.property('id');",
							"        pm.expect(operationType).to.have.property('name');",
							"        pm.expect(operationType).to.have.property('status');",
							"        pm.expect(operationType).to.have.property('preparationPhase');",
							"        pm.expect(operationType).to.have.property('surgeryPhase');",
							"        pm.expect(operationType).to.have.property('cleaningPhase');",
							"        pm.expect(operationType).to.have.property('specialization');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Duration in preparationPhase, surgeryPhase, and cleaningPhase is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.preparationPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(operationType.surgeryPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(operationType.cleaningPhase.duration).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Required staff array has the expected number of elements in preparation, surgery, and cleaning phases\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(operationType => {",
							"        pm.expect(operationType.preparationPhase.requiredStaff).to.be.an('array').that.is.not.empty;",
							"        pm.expect(operationType.preparationPhase.requiredStaff).to.have.lengthOf.at.least(1, \"At least one required staff member is expected in preparation phase\");",
							"",
							"        pm.expect(operationType.surgeryPhase.requiredStaff).to.be.an('array').that.is.not.empty;",
							"        pm.expect(operationType.surgeryPhase.requiredStaff).to.have.lengthOf.at.least(1, \"At least one required staff member is expected in surgery phase\");",
							"",
							"        pm.expect(operationType.cleaningPhase.requiredStaff).to.be.an('array').that.is.not.empty;",
							"        pm.expect(operationType.cleaningPhase.requiredStaff).to.have.lengthOf.at.least(1, \"At least one required staff member is expected in cleaning phase\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/Filter?specialization=Ortopedia",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"Filter"
					],
					"query": [
						{
							"key": "specialization",
							"value": "Ortopedia"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FilterWorksForStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Array elements have the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(operation) {",
							"        pm.expect(operation).to.have.property('id');",
							"        pm.expect(operation).to.have.property('name');",
							"        pm.expect(operation).to.have.property('status');",
							"        pm.expect(operation).to.have.property('preparationPhase');",
							"        pm.expect(operation).to.have.property('surgeryPhase');",
							"        pm.expect(operation).to.have.property('cleaningPhase');",
							"        pm.expect(operation).to.have.property('specialization');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Preparation phase object has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.preparationPhase).to.be.an('object');",
							"        pm.expect(operationType.preparationPhase.id).to.exist;",
							"        pm.expect(operationType.preparationPhase.duration).to.exist;",
							"        pm.expect(operationType.preparationPhase.requiredStaff).to.be.an('array');",
							"    });",
							"});",
							"",
							"pm.test(\"Surgery phase object has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.surgeryPhase).to.be.an('object');",
							"        pm.expect(operationType.surgeryPhase.id).to.exist;",
							"        pm.expect(operationType.surgeryPhase.duration).to.exist;",
							"        pm.expect(operationType.surgeryPhase.requiredStaff).to.be.an('array');",
							"    });",
							"});",
							"",
							"pm.test(\"Cleaning phase object has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.cleaningPhase).to.be.an('object');",
							"        pm.expect(operationType.cleaningPhase.id).to.exist;",
							"        pm.expect(operationType.cleaningPhase.duration).to.exist;",
							"        pm.expect(operationType.cleaningPhase.requiredStaff).to.be.an('array');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the requiredStaff array elements have the required fields - num, specialization\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(phase => {",
							"        [\"preparationPhase\", \"surgeryPhase\", \"cleaningPhase\"].forEach(phaseName => {",
							"            pm.expect(phase[phaseName].requiredStaff).to.be.an('array');",
							"            phase[phaseName].requiredStaff.forEach(staff => {",
							"                pm.expect(staff).to.have.property('num').that.is.a('string');",
							"                pm.expect(staff).to.have.property('specialization').that.is.a('string');",
							"            });",
							"        });",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/Filter?status=active",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"Filter"
					],
					"query": [
						{
							"key": "status",
							"value": "active"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FilterWorksForName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response structure and data types are correct\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType).to.have.property('id').that.is.a('string');",
							"        pm.expect(operationType).to.have.property('name').that.is.a('string');",
							"        pm.expect(operationType).to.have.property('status').that.is.a('string');",
							"        pm.expect(operationType).to.have.property('preparationPhase').that.is.an('object').and.to.have.property('id').that.is.a('string');",
							"        pm.expect(operationType.preparationPhase).to.have.property('duration').that.is.a('number');",
							"        pm.expect(operationType.preparationPhase.requiredStaff).to.be.an('array').and.to.not.be.empty;",
							"        operationType.preparationPhase.requiredStaff.forEach(function(staff) {",
							"            pm.expect(staff).to.have.property('num').that.is.a('string');",
							"            pm.expect(staff).to.have.property('specialization').that.is.a('string');",
							"        });",
							"",
							"        pm.expect(operationType).to.have.property('surgeryPhase').that.is.an('object').and.to.have.property('id').that.is.a('string');",
							"        pm.expect(operationType.surgeryPhase).to.have.property('duration').that.is.a('number');",
							"        pm.expect(operationType.surgeryPhase.requiredStaff).to.be.an('array').and.to.not.be.empty;",
							"        operationType.surgeryPhase.requiredStaff.forEach(function(staff) {",
							"            pm.expect(staff).to.have.property('num').that.is.a('string');",
							"            pm.expect(staff).to.have.property('specialization').that.is.a('string');",
							"        });",
							"",
							"        pm.expect(operationType).to.have.property('cleaningPhase').that.is.an('object').and.to.have.property('id').that.is.a('string');",
							"        pm.expect(operationType.cleaningPhase).to.have.property('duration').that.is.a('number');",
							"        pm.expect(operationType.cleaningPhase.requiredStaff).to.be.an('array').and.to.not.be.empty;",
							"        operationType.cleaningPhase.requiredStaff.forEach(function(staff) {",
							"            pm.expect(staff).to.have.property('num').that.is.a('string');",
							"            pm.expect(staff).to.have.property('specialization').that.is.a('string');",
							"        });",
							"",
							"        pm.expect(operationType).to.have.property('specialization').that.is.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/Filter?name=New%20Operation%20Type",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"Filter"
					],
					"query": [
						{
							"key": "name",
							"value": "New%20Operation%20Type"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FilterWorksForCombinedInputs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema for id, name, status, preparationPhase, surgeryPhase, cleaningPhase, and specialization\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType).to.have.property('id');",
							"        pm.expect(operationType).to.have.property('name');",
							"        pm.expect(operationType).to.have.property('status');",
							"        pm.expect(operationType).to.have.property('preparationPhase').that.is.an('object');",
							"        pm.expect(operationType).to.have.property('surgeryPhase').that.is.an('object');",
							"        pm.expect(operationType).to.have.property('cleaningPhase').that.is.an('object');",
							"        pm.expect(operationType).to.have.property('specialization');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ensure id, duration, and requiredStaff are present and in correct format for preparationPhase\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.preparationPhase).to.exist;",
							"        pm.expect(operationType.preparationPhase.id).to.be.a('string');",
							"        pm.expect(operationType.preparationPhase.duration).to.be.a('number');",
							"        pm.expect(operationType.preparationPhase.requiredStaff).to.be.an('array');",
							"    });",
							"});",
							"",
							"pm.test(\"Ensure id, duration, and requiredStaff are present and in correct format for surgeryPhase\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.surgeryPhase).to.exist;",
							"        pm.expect(operationType.surgeryPhase.id).to.be.a('string');",
							"        pm.expect(operationType.surgeryPhase.duration).to.be.a('number');",
							"        pm.expect(operationType.surgeryPhase.requiredStaff).to.be.an('array');",
							"    });",
							"});",
							"",
							"pm.test(\"Ensure id, duration, and requiredStaff are present and in correct format for cleaningPhase\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(operationType) {",
							"        pm.expect(operationType.cleaningPhase).to.exist;",
							"        pm.expect(operationType.cleaningPhase.id).to.be.a('string');",
							"        pm.expect(operationType.cleaningPhase.duration).to.be.a('number');",
							"        pm.expect(operationType.cleaningPhase.requiredStaff).to.be.an('array');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/OperationType/Filter?name=New%20Operation%20Type&status=active&specialization=Ortopedia",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"OperationType",
						"Filter"
					],
					"query": [
						{
							"key": "name",
							"value": "New%20Operation%20Type"
						},
						{
							"key": "status",
							"value": "active"
						},
						{
							"key": "specialization",
							"value": "Ortopedia"
						}
					]
				}
			},
			"response": []
		}
	]
}