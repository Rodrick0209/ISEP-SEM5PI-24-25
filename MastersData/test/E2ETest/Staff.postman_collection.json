{
	"info": {
		"_postman_id": "922009f7-b0fd-43a2-8ed7-47a01a970f6b",
		"name": "Staff",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39315870"
	},
	"item": [
		{
			"name": "Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.globals.set(\"Token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"admin@teste.com\",\r\n    \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/Login/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Login",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Teste para verificar se a resposta contém os campos obrigatórios\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item.id).to.have.property('value'); // Campo aninhado no objeto `id`\r",
							"        pm.expect(item).to.have.property('fullName');\r",
							"        pm.expect(item).to.have.property('licenseNumber');\r",
							"        pm.expect(item).to.have.property('specializationId');\r",
							"        pm.expect(item).to.have.property('availabilitySlotsId');\r",
							"        pm.expect(item).to.have.property('email');\r",
							"        pm.expect(item).to.have.property('phoneNumber');\r",
							"        pm.expect(item).to.have.property('category');\r",
							"        pm.expect(item).to.have.property('status');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Teste de tempo de resposta (deve ser inferior a 200ms)\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Teste do cabeçalho Content-Type (deve ser JSON)\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Armazenamento de variáveis no ambiente para uso posterior\r",
							"const responseJson = pm.response.json();\r",
							"pm.environment.set(\"staffId\", responseJson[0].id.value);\r",
							"pm.environment.set(\"staffId2\", responseJson[1].id.value);\r",
							"pm.environment.set(\"fullName\", responseJson[0].fullName);\r",
							"pm.environment.set(\"specializationId\", responseJson[0].specializationId);\r",
							"pm.environment.set(\"availabilitySlotsId\", responseJson[1].availabilitySlotsId);\r",
							"pm.environment.set(\"email\", responseJson[0].email);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/Staff/GetAll",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Staff",
						"GetAll"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Teste do código de status\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Teste de tempo de resposta\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Teste para verificar se a resposta possui os campos esperados\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData.id).to.have.property('value');\r",
							"    pm.expect(responseData).to.have.property('fullName');\r",
							"    pm.expect(responseData).to.have.property('licenseNumber');\r",
							"    pm.expect(responseData).to.have.property('specializationId');\r",
							"    pm.expect(responseData).to.have.property('availabilitySlotsId');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('phoneNumber');\r",
							"    pm.expect(responseData).to.have.property('category');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"});\r",
							"\r",
							"// Verificação de tipos de dados\r",
							"pm.test(\"Id value should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id.value).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"fullName should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.fullName).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"licenseNumber should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.licenseNumber).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"specializationId should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.specializationId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"availabilitySlotsId should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.availabilitySlotsId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"email should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"phoneNumber should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.phoneNumber).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"category should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.category).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"status should be a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Teste para verificar o formato do email\r",
							"pm.test(\"Email should be in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
							"});\r",
							"\r",
							"// Teste para verificar o formato do número de telefone\r",
							"pm.test(\"Phone number should be in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.phoneNumber).to.match(/^\\+\\d{11,15}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/Staff/{{staffId2}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Staff",
						"{{staffId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Teste para verificar o sucesso da requisição\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"// Obtendo a resposta e salvando alguns dados globais\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"\r",
							"\r",
							"// Teste para verificar se a resposta possui os campos esperados\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData.id).to.have.property('value');\r",
							"    pm.expect(jsonData).to.have.property('fullName');\r",
							"    pm.expect(jsonData).to.have.property('licenseNumber');\r",
							"    pm.expect(jsonData).to.have.property('specializationId');\r",
							"    pm.expect(jsonData).to.have.property('availabilitySlotsId');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('phoneNumber');\r",
							"    pm.expect(jsonData).to.have.property('category');\r",
							"    pm.expect(jsonData).to.have.property('status');\r",
							"});\r",
							"\r",
							"// Verificação de tipos de dados\r",
							"pm.test(\"Id value should be a string\", function () {\r",
							"    pm.expect(jsonData.id.value).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"fullName should be a string\", function () {\r",
							"    pm.expect(jsonData.fullName).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"licenseNumber should be a string\", function () {\r",
							"    pm.expect(jsonData.licenseNumber).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"specializationId should be a string\", function () {\r",
							"    pm.expect(jsonData.specializationId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"availabilitySlotsId should be a string\", function () {\r",
							"    pm.expect(jsonData.availabilitySlotsId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"email should be a string\", function () {\r",
							"    pm.expect(jsonData.email).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"phoneNumber should be a string\", function () {\r",
							"    pm.expect(jsonData.phoneNumber).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"category should be a string\", function () {\r",
							"    pm.expect(jsonData.category).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"status should be a string\", function () {\r",
							"    pm.expect(jsonData.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {},\r\n  \"fullName\": \"Mariotesting\",\r\n  \"licenseNumber\": \"14539\",\r\n  \"specializationId\": \"{{specializationId}}\",\r\n  \"availabilitySlotsId\": \"{{availabilitySlotsId}}\",\r\n  \"email\": \"rodrigopontescard@gmail.com\",\r\n  \"phoneNumber\": \"+351 123456767\",\r\n  \"category\": \"Doctor\",\r\n  \"status\": \"True\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/Staff",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Staff"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200 or 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
							"});\r",
							"\r",
							"\r",
							"// Teste 3: Verificar se a resposta contém os campos esperados\r",
							"pm.test(\"Response contains the updated staff fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.fullName).to.exist;\r",
							"    pm.expect(responseData.licenseNumber).to.exist;\r",
							"    pm.expect(responseData.phoneNumber).to.exist;\r",
							"    pm.expect(responseData.email).to.exist;\r",
							"});\r",
							"\r",
							"// Teste 4: Verificar se o campo `id` é o mesmo que o `staffId`\r",
							"pm.test(\"Staff id should be the same as the requested staffId\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id.value).to.eql(pm.variables.get(\"staffId2\"));\r",
							"});\r",
							"\r",
							"// Teste 5: Verificar se o `fullName` foi atualizado corretamente\r",
							"pm.test(\"Full name should be updated correctly\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.fullName).to.eql(\"MarioUpdate\");\r",
							"});\r",
							"\r",
							"// Teste 6: Verificar se o `licenseNumber` foi atualizado corretamente\r",
							"pm.test(\"License number should be updated correctly\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.licenseNumber).to.eql(\"12337\");\r",
							"});\r",
							"\r",
							"// Teste 7: Verificar se o `phoneNumber` foi atualizado corretamente\r",
							"pm.test(\"Phone number should be updated correctly\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.phoneNumber).to.eql(\"+351 123456788\");\r",
							"});\r",
							"\r",
							"// Teste 8: Verificar se o `email` foi atualizado corretamente\r",
							"pm.test(\"Email should be updated correctly\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.eql(\"rodrigopontescardosoo@gmail.com\");\r",
							"});\r",
							"\r",
							"// Teste 9: Verificar se o código de erro é retornado quando o email ou telefone não for único (se aplicável)\r",
							"pm.test(\"Check if the response returns an error for duplicate email/phone number\", function () {\r",
							"    if (pm.response.code === 400) {  // Ajuste o código conforme a resposta de erro real\r",
							"        const responseData = pm.response.json();\r",
							"        pm.expect(responseData.message).to.include(\"Email and/or Phone Number are not unique\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{staffId2}}\",\r\n  \"fullName\": \"MarioUpdate\",\r\n  \"licenseNumber\": \"12337\",\r\n  \"phoneNumber\": \"+351 123456788\",\r\n  \"email\": \"rodrigopontescardosoo@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/api/Staff/{{staffId2}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Staff",
						"{{staffId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Teste 1: Verificar se a resposta tem o status 200 ou 204 (geralmente, DELETE retorna 204)\r",
							"pm.test(\"Response status code is 200 or 204\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"// Teste 2: Verificar se o tempo de resposta é abaixo de 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Teste 3: Verificar se o corpo da resposta contém status 'False'\r",
							"pm.test(\"Response body should contain status 'False'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('status', 'False');\r",
							"});\r",
							"\r",
							"// Teste 4: Verificar se o status do staff foi atualizado para False\r",
							"pm.test(\"Staff status should be updated to False\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.status).to.eql('False');\r",
							"});\r",
							"\r",
							"\r",
							"// Obtendo a resposta e salvando alguns dados globais\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"// Verificação de tipos de dados\r",
							"pm.test(\"Id value should be a string\", function () {\r",
							"    pm.expect(jsonData.id.value).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"fullName should be a string\", function () {\r",
							"    pm.expect(jsonData.fullName).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"licenseNumber should be a string\", function () {\r",
							"    pm.expect(jsonData.licenseNumber).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"specializationId should be a string\", function () {\r",
							"    pm.expect(jsonData.specializationId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"availabilitySlotsId should be a string\", function () {\r",
							"    pm.expect(jsonData.availabilitySlotsId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"email should be a string\", function () {\r",
							"    pm.expect(jsonData.email).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"phoneNumber should be a string\", function () {\r",
							"    pm.expect(jsonData.phoneNumber).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"category should be a string\", function () {\r",
							"    pm.expect(jsonData.category).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"status should be a string\", function () {\r",
							"    pm.expect(jsonData.status).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/api/Staff/{{staffId}}",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"api",
						"Staff",
						"{{staffId}}"
					]
				}
			},
			"response": []
		}
	]
}