// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(DDDSample1DbContext))]
    partial class DDDSample1DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DDDSample1.Domain.Appointments.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("OperationRequestId")
                        .HasColumnType("longtext");

                    b.Property<string>("OperationRoomId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DDDSample1.Domain.AvailabilitySlots.AvailabilitySlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StaffId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AvailabilitySlots");
                });

            modelBuilder.Entity("DDDSample1.Domain.AvailabilitySlots.DailyAvailability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AvailabilitySlotId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.ToTable("DailyAvailabilities");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequest.OperationRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("doctorThatRequestedId")
                        .HasColumnType("longtext");

                    b.Property<string>("doctorThatWillPerformId")
                        .HasColumnType("longtext");

                    b.Property<string>("operationTypeId")
                        .HasColumnType("longtext");

                    b.Property<string>("patientId")
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OperationRequests");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequestLoggers.OperationRequestLogger", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeadLineDate")
                        .HasColumnType("longtext");

                    b.Property<string>("DoctorThatRequestedId")
                        .HasColumnType("longtext");

                    b.Property<string>("DoctorThatWillPerformId")
                        .HasColumnType("longtext");

                    b.Property<string>("LoggerType")
                        .HasColumnType("longtext");

                    b.Property<string>("OperationRequestId")
                        .HasColumnType("longtext");

                    b.Property<string>("OperationTypeId")
                        .HasColumnType("longtext");

                    b.Property<string>("Priority")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OperationRequestLoggers");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRooms.OperationRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RoomStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OperationRooms");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("cleaningPhaseId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("preparationPhaseId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("specialization")
                        .HasColumnType("longtext");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("surgeryPhaseId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("cleaningPhaseId");

                    b.HasIndex("preparationPhaseId");

                    b.HasIndex("surgeryPhaseId");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationTypeLogger", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OperationRequestId")
                        .HasColumnType("longtext");

                    b.Property<string>("cleaningPhaseId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<string>("preparationPhaseId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("specialization")
                        .HasColumnType("longtext");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("surgeryPhaseId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("version")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("cleaningPhaseId");

                    b.HasIndex("preparationPhaseId");

                    b.HasIndex("surgeryPhaseId");

                    b.ToTable("OperationTypeLoggers");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.Phase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("DDDSample1.Domain.PatientLoggers.PatientLogger", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicalConditions")
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeOfChange")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PatientLoggers");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DDDSample1.Domain.Specializations.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("DDDSample1.Domain.StaffLoggers.StaffLogger", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AvailabilitySlotsId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LoggerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StaffLoggers");
                });

            modelBuilder.Entity("DDDSample1.Domain.StaffMembers.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AvailabilitySlotsId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("SpecializationId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StaffMembers");
                });

            modelBuilder.Entity("DDDSample1.Domain.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("accountConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DDDSample1.Domain.Appointments.Appointment", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.Appointments.AppointmentTimeSlot", "AppointmentTimeSlot", b1 =>
                        {
                            b1.Property<string>("AppointmentId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");

                            b1.OwnsOne("DDDSample1.Domain.Utils.TimeSlot", "TimeSlot", b2 =>
                                {
                                    b2.Property<string>("AppointmentTimeSlotAppointmentId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<int>("EndMinute")
                                        .HasColumnType("int");

                                    b2.Property<int>("StartMinute")
                                        .HasColumnType("int");

                                    b2.HasKey("AppointmentTimeSlotAppointmentId");

                                    b2.ToTable("Appointments");

                                    b2.WithOwner()
                                        .HasForeignKey("AppointmentTimeSlotAppointmentId");
                                });

                            b1.Navigation("TimeSlot");
                        });

                    b.Navigation("AppointmentTimeSlot");
                });

            modelBuilder.Entity("DDDSample1.Domain.AvailabilitySlots.DailyAvailability", b =>
                {
                    b.HasOne("DDDSample1.Domain.AvailabilitySlots.AvailabilitySlot", null)
                        .WithMany("Availability")
                        .HasForeignKey("AvailabilitySlotId");

                    b.OwnsMany("DDDSample1.Domain.Utils.TimeSlot", "TimeSlots", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DailyAvailabilityId")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("EndMinute")
                                .HasColumnType("int");

                            b1.Property<int>("StartMinute")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("DailyAvailabilityId");

                            b1.ToTable("DailyAvailabilities_TimeSlots");

                            b1.WithOwner()
                                .HasForeignKey("DailyAvailabilityId");
                        });

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequest.OperationRequest", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.OperationRequest.DeadLineDate", "deadLineDate", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("deadLineDate")
                                .HasColumnType("longtext");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.OwnsOne("DDDSample1.Domain.OperationRequest.Priority", "priority", b1 =>
                        {
                            b1.Property<string>("OperationRequestId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("priority")
                                .HasColumnType("longtext");

                            b1.HasKey("OperationRequestId");

                            b1.ToTable("OperationRequests");

                            b1.WithOwner()
                                .HasForeignKey("OperationRequestId");
                        });

                    b.Navigation("deadLineDate");

                    b.Navigation("priority");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRooms.OperationRoom", b =>
                {
                    b.OwnsMany("DDDSample1.Domain.OperationRooms.MaintenanceSlots", "MaintenanceSlots", b1 =>
                        {
                            b1.Property<string>("OperationRoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.HasKey("OperationRoomId", "Id");

                            b1.ToTable("MaintenanceSlots");

                            b1.WithOwner()
                                .HasForeignKey("OperationRoomId");

                            b1.OwnsMany("DDDSample1.Domain.Utils.TimeSlot", "TimeSlots", b2 =>
                                {
                                    b2.Property<string>("MaintenanceSlotsOperationRoomId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<int>("MaintenanceSlotsId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("EndMinute")
                                        .HasColumnType("int");

                                    b2.Property<int>("StartMinute")
                                        .HasColumnType("int");

                                    b2.HasKey("MaintenanceSlotsOperationRoomId", "MaintenanceSlotsId", "Id");

                                    b2.ToTable("MaintenanceSlots_TimeSlots");

                                    b2.WithOwner()
                                        .HasForeignKey("MaintenanceSlotsOperationRoomId", "MaintenanceSlotsId");
                                });

                            b1.Navigation("TimeSlots");
                        });

                    b.OwnsOne("DDDSample1.Domain.OperationRooms.RoomCapacity", "RoomCapacity", b1 =>
                        {
                            b1.Property<string>("OperationRoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("roomCapacity")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("OperationRoomId");

                            b1.ToTable("OperationRooms");

                            b1.WithOwner()
                                .HasForeignKey("OperationRoomId");
                        });

                    b.OwnsOne("DDDSample1.Domain.OperationRooms.RoomNumber", "RoomNumber", b1 =>
                        {
                            b1.Property<string>("OperationRoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("roomNumber")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.HasKey("OperationRoomId");

                            b1.HasIndex("roomNumber")
                                .IsUnique();

                            b1.ToTable("OperationRooms");

                            b1.WithOwner()
                                .HasForeignKey("OperationRoomId");
                        });

                    b.OwnsOne("DDDSample1.Domain.OperationRooms.RoomType", "RoomType", b1 =>
                        {
                            b1.Property<string>("OperationRoomId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("roomType")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("OperationRoomId");

                            b1.ToTable("OperationRooms");

                            b1.WithOwner()
                                .HasForeignKey("OperationRoomId");
                        });

                    b.Navigation("MaintenanceSlots");

                    b.Navigation("RoomCapacity");

                    b.Navigation("RoomNumber");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.HasOne("DDDSample1.Domain.OperationTypes.Phase", "cleaningPhase")
                        .WithMany()
                        .HasForeignKey("cleaningPhaseId");

                    b.HasOne("DDDSample1.Domain.OperationTypes.Phase", "preparationPhase")
                        .WithMany()
                        .HasForeignKey("preparationPhaseId");

                    b.HasOne("DDDSample1.Domain.OperationTypes.Phase", "surgeryPhase")
                        .WithMany()
                        .HasForeignKey("surgeryPhaseId");

                    b.Navigation("cleaningPhase");

                    b.Navigation("preparationPhase");

                    b.Navigation("surgeryPhase");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationTypeLogger", b =>
                {
                    b.HasOne("DDDSample1.Domain.OperationTypes.Phase", "cleaningPhase")
                        .WithMany()
                        .HasForeignKey("cleaningPhaseId");

                    b.HasOne("DDDSample1.Domain.OperationTypes.Phase", "preparationPhase")
                        .WithMany()
                        .HasForeignKey("preparationPhaseId");

                    b.HasOne("DDDSample1.Domain.OperationTypes.Phase", "surgeryPhase")
                        .WithMany()
                        .HasForeignKey("surgeryPhaseId");

                    b.Navigation("cleaningPhase");

                    b.Navigation("preparationPhase");

                    b.Navigation("surgeryPhase");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.Phase", b =>
                {
                    b.OwnsMany("DDDSample1.Domain.OperationTypes.RequiredStaff", "requiredStaff", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("PhaseId")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("num")
                                .HasColumnType("int");

                            b1.Property<string>("specialization")
                                .HasColumnType("longtext");

                            b1.HasKey("Id");

                            b1.HasIndex("PhaseId");

                            b1.ToTable("RequiredStaff");

                            b1.WithOwner()
                                .HasForeignKey("PhaseId");
                        });

                    b.Navigation("requiredStaff");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.HasOne("DDDSample1.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("DDDSample1.Domain.Patients.Address", "Address", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.OwnsOne("DDDSample1.Domain.Patients.City", "City", b2 =>
                                {
                                    b2.Property<string>("AddressPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("city")
                                        .HasColumnType("longtext");

                                    b2.HasKey("AddressPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressPatientId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Patients.Country", "Country", b2 =>
                                {
                                    b2.Property<string>("AddressPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("country")
                                        .HasColumnType("longtext");

                                    b2.HasKey("AddressPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressPatientId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Patients.PostalCode", "PostalCode", b2 =>
                                {
                                    b2.Property<string>("AddressPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("postalCode")
                                        .HasColumnType("longtext");

                                    b2.HasKey("AddressPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressPatientId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Patients.Street", "Street", b2 =>
                                {
                                    b2.Property<string>("AddressPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("street")
                                        .HasColumnType("longtext");

                                    b2.HasKey("AddressPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressPatientId");
                                });

                            b1.Navigation("City");

                            b1.Navigation("Country");

                            b1.Navigation("PostalCode");

                            b1.Navigation("Street");
                        });

                    b.OwnsOne("DDDSample1.Domain.Patients.DateOfBirth", "DateOfBirth", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("dateOfBirth")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Patients.EmergencyContact", "EmergencyContact", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.OwnsOne("DDDSample1.Domain.Utils.Email", "Email", b2 =>
                                {
                                    b2.Property<string>("EmergencyContactPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("email")
                                        .HasColumnType("longtext");

                                    b2.HasKey("EmergencyContactPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("EmergencyContactPatientId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Utils.FullName", "Name", b2 =>
                                {
                                    b2.Property<string>("EmergencyContactPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("fullName")
                                        .HasColumnType("longtext");

                                    b2.HasKey("EmergencyContactPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("EmergencyContactPatientId");
                                });

                            b1.OwnsOne("DDDSample1.Domain.Utils.PhoneNumber", "PhoneNumber", b2 =>
                                {
                                    b2.Property<string>("EmergencyContactPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("phoneNumber")
                                        .HasColumnType("longtext");

                                    b2.HasKey("EmergencyContactPatientId");

                                    b2.ToTable("Patients");

                                    b2.WithOwner()
                                        .HasForeignKey("EmergencyContactPatientId");
                                });

                            b1.Navigation("Email");

                            b1.Navigation("Name");

                            b1.Navigation("PhoneNumber");
                        });

                    b.OwnsOne("DDDSample1.Domain.Patients.Gender", "Gender", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("gender")
                                .HasColumnType("longtext");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Patients.MedicalHistory", "MedicalHistory", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Id")
                                .HasColumnType("longtext");

                            b1.HasKey("PatientId");

                            b1.ToTable("MedicalHistories");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.OwnsOne("DDDSample1.Domain.Patients.MedicalConditions", "MedicalConditions", b2 =>
                                {
                                    b2.Property<string>("MedicalHistoryPatientId")
                                        .HasColumnType("varchar(255)");

                                    b2.Property<string>("medicalConditions")
                                        .HasColumnType("longtext");

                                    b2.HasKey("MedicalHistoryPatientId");

                                    b2.ToTable("MedicalHistories");

                                    b2.WithOwner()
                                        .HasForeignKey("MedicalHistoryPatientId");
                                });

                            b1.Navigation("MedicalConditions");
                        });

                    b.OwnsOne("DDDSample1.Domain.Patients.MedicalRecordNumber", "MedicalRecordNumber", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("_medicalRecordNumber")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PatientId");

                            b1.HasIndex("_medicalRecordNumber")
                                .IsUnique();

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.Email", "Email", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("email")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PatientId");

                            b1.HasIndex("email")
                                .IsUnique();

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("fullName")
                                .HasColumnType("longtext");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<string>("PatientId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("phoneNumber")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("PatientId");

                            b1.HasIndex("phoneNumber")
                                .IsUnique();

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("DateOfBirth")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("EmergencyContact")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Gender")
                        .IsRequired();

                    b.Navigation("MedicalHistory")
                        .IsRequired();

                    b.Navigation("MedicalRecordNumber")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDDSample1.Domain.StaffMembers.Staff", b =>
                {
                    b.HasOne("DDDSample1.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("DDDSample1.Domain.StaffMembers.LicenseNumber", "LicenseNumber", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("licenseNumber")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.HasKey("StaffId");

                            b1.HasIndex("licenseNumber")
                                .IsUnique();

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.Email", "Email", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("email")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("StaffId");

                            b1.HasIndex("email")
                                .IsUnique();

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("fullName")
                                .HasColumnType("longtext");

                            b1.HasKey("StaffId");

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<string>("StaffId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("phoneNumber")
                                .HasColumnType("varchar(255)");

                            b1.HasKey("StaffId");

                            b1.HasIndex("phoneNumber")
                                .IsUnique();

                            b1.ToTable("StaffMembers");

                            b1.WithOwner()
                                .HasForeignKey("StaffId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("LicenseNumber")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DDDSample1.Domain.User.User", b =>
                {
                    b.OwnsOne("DDDSample1.Domain.User.AccountBlockedTime", "accountBlockedTime", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("accountBlockedTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ConfirmationDeletePatientToken", "confirmationDeletePatientToken", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Token")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ConfirmationDeletePatientTokenExpiration", "confirmationDeletePatientTokenExpiration", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ConfirmationEditPatientToken", "confirmationEditPatientToken", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Token")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ConfirmationEditPatientTokenExpiration", "confirmationEditPatientTokenExpiration", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ConfirmationRegisterPatientToken", "confirmationRegisterPatientToken", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("Token")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ConfirmationRegisterPatientTokenExpiration", "confirmationRegisterPatientTokenExpiration", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.LoginFailCounter", "loginFailCounter", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("loginFailCounter")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.Password", "password", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("password")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ResetPasswordToken", "resetPasswordToken", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("resetPasswordToken")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.ResetPasswordTokenExpiration", "resetPasswordTokenExpiration", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<DateTime>("resetPasswordTokenExpiration")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.User.Role", "role", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("role")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("DDDSample1.Domain.Utils.Email", "email", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("email")
                                .HasColumnType("longtext");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("accountBlockedTime");

                    b.Navigation("confirmationDeletePatientToken");

                    b.Navigation("confirmationDeletePatientTokenExpiration");

                    b.Navigation("confirmationEditPatientToken");

                    b.Navigation("confirmationEditPatientTokenExpiration");

                    b.Navigation("confirmationRegisterPatientToken");

                    b.Navigation("confirmationRegisterPatientTokenExpiration");

                    b.Navigation("email")
                        .IsRequired();

                    b.Navigation("loginFailCounter");

                    b.Navigation("password");

                    b.Navigation("resetPasswordToken");

                    b.Navigation("resetPasswordTokenExpiration");

                    b.Navigation("role")
                        .IsRequired();
                });

            modelBuilder.Entity("DDDSample1.Domain.AvailabilitySlots.AvailabilitySlot", b =>
                {
                    b.Navigation("Availability");
                });
#pragma warning restore 612, 618
        }
    }
}
